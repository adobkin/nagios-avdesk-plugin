CMAKE_MINIMUM_REQUIRED (VERSION 2.6)
SET(CMAKE_VERBOSE_MAKEFILE ON)
PROJECT(check_avdesk)

SET(CMAKE_MODULE_PATH "${BUILD_DIR}/CMake")

IF (CMAKE_BUILD_TYPE STREQUAL "Release")
    SET (BUILD_TYPE "Release")
ENDIF(CMAKE_BUILD_TYPE STREQUAL "Release")    
IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
    SET (BUILD_TYPE "Debug")
ENDIF (CMAKE_BUILD_TYPE STREQUAL "Debug")
IF (CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
    SET (BUILD_TYPE "MinSizeRel")
ENDIF (CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
IF (CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    SET (BUILD_TYPE "RelWithDebInfo")
ENDIF (CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    
IF(NOT DEFINED BUILD_TYPE)
    SET (BUILD_TYPE "Release")
ENDIF(NOT DEFINED BUILD_TYPE)

SET(CMAKE_BUILD_TYPE ${BUILD_TYPE})

SET(VERSION_MAJOR 0)
SET(VERSION_MINOR 1)
SET(VERSION_PATCH 0)

SET(VERSION "${DWAVDAPI_VERSION_MAJOR}.${DWAVDAPI_VERSION_MINOR}.${DWAVDAPI_VERSION_PATCH}")
SET(PROJECT_VERSION ${VERSION})
SET(NUM_VERSION "")

IF(VERSION_MAJOR LESS 10 ) 
    SET(NUM_VERSION "${NUM_VERSION}0${VERSION_MAJOR}")
ELSEIF(VERSION_MAJOR LESS 10 )
    SET(NUM_VERSION "${NUM_VERSION}${VERSION_MAJOR}")
ENDIF(VERSION_MAJOR LESS 10 )

IF(VERSION_MINOR LESS 10 ) 
    SET(NUM_VERSION "${NUM_VERSION}0${VERSION_MINOR}")
ELSEIF(VERSION_MINOR LESS 10 )
    SET(NUM_VERSION "${NUM_VERSION}${VERSION_MINOR}")
ENDIF(VERSION_MINOR LESS 10 )

IF(VERSION_PATCH LESS 10 ) 
    SET(NUM_VERSION "${NUM_VERSION}0${VERSION_PATCH}")
ELSEIF(VERSION_PATCH LESS 10 )
    SET(NUM_VERSION "${NUM_VERSION}${VERSION_PATCH}")
ENDIF(VERSION_PATCH LESS 10 )

IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_C_FLAGS " -std=c99 -O3 -Wall -Wextra -Wimplicit -D_BSD_SOURCE")
ELSE(CMAKE_COMPILER_IS_GNUCXX)

ENDIF(CMAKE_COMPILER_IS_GNUCXX)
                                                                                                                                                                                    SET(DEB_BASED_SYSTEM "ON")
IF(${CMAKE_SYSTEM} MATCHES "Windows")
    SET(OS_WINDOWS 1)
ENDIF(${CMAKE_SYSTEM} MATCHES "Windows")

IF(${CMAKE_SYSTEM} MATCHES "FreeBSD")
    SET(OS_FREEBSD 1)
    SET(OS_BSD_FAMILY 1)
ENDIF(${CMAKE_SYSTEM} MATCHES "FreeBSD")

IF (${CMAKE_SYSTEM} MATCHES "OpenBSD")
    SET(OS_OPENBSD 1)
    SET(OS_BSD_FAMILY 1)
ENDIF (${CMAKE_SYSTEM} MATCHES "OpenBSD")

IF (${CMAKE_SYSTEM} MATCHES "Linux")
    SET(OS_LINUX 1)
ENDIF (${CMAKE_SYSTEM} MATCHES "Linux")
    
IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    SET(OS_MACOS 1)
    SET(OS_BSD_FAMILY 1)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

STRING(REGEX MATCH "(i.86-*)|(athlon-*)|(pentium-*)|x86" _mach_x86 ${CMAKE_HOST_SYSTEM_PROCESSOR})
IF (_mach_x86)
    SET(ARCH_X86 1)
    SET(ARCH_NAME x86)
ENDIF (_mach_x86)

STRING(REGEX MATCH "(x86_64-*)|(X86_64-*)|(AMD64-*)|(amd64-*)|x64" _mach_x86_64 ${CMAKE_HOST_SYSTEM_PROCESSOR})
IF (_mach_x86_64)
    SET(ARCH_X86_64 1)
    SET(ARCH_NAME x86_64)
ENDIF (_mach_x86_64)
                 
INCLUDE_DIRECTORIES ( "${CMAKE_SOURCE_DIR}"  )

INCLUDE (CheckFunctionExists)
INCLUDE (CheckIncludeFiles)
INCLUDE (CheckSymbolExists)

CHECK_INCLUDE_FILES (string.h HAVE_STRING_H)
CHECK_INCLUDE_FILES (strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILES (malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILES (unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILES (sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILES (sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILES (fcntl.h HAVE_FCNTL_H)
CHECK_INCLUDE_FILES (dirent.h HAVE_DIRENT_H)
CHECK_INCLUDE_FILES (time.h HAVE_TIME_H)
CHECK_INCLUDE_FILES (errno.h HAVE_ERRNO_H)
CHECK_INCLUDE_FILES (stdarg.h HAVE_STDARG_H)
CHECK_INCLUDE_FILES (dlfcn.h HAVE_DLFCN_H)
CHECK_INCLUDE_FILES (features.h HAVE_FEATURES_H)
CHECK_INCLUDE_FILES (ctype.h HAVE_CTYPE_H)
CHECK_INCLUDE_FILES (arpa/inet.h HAVE_ARPA_INET_H)
CHECK_INCLUDE_FILES (netinet/in.h HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILES (netdb.h HAVE_NETDB_H)
CHECK_INCLUDE_FILES (getopt.h HAVE_GETOPT_H)

IF(UNIX)
    LINK_DIRECTORIES("/usr/lib")
    IF (OS_FREEBSD)
        LINK_DIRECTORIES("/usr/local/lib")
    ELSE (OS_FREEBSD)
        IF(OS_MACOS)
            LINK_DIRECTORIES("/opt/local/lib")
        ENDIF(OS_MACOS)
    ENDIF (OS_FREEBSD)
ENDIF(UNIX)

CONFIGURE_FILE(config.h.cmake config.h)
CONFIGURE_FILE(version.h.cmake version.h)
CONFIGURE_FILE(platform.h.cmake platform.h)

SET( SOURCE_FILES 
    main.c
)

ADD_EXECUTABLE(check_avdesk ${SOURCE_FILES})

MESSAGE( STATUS "============================================================")
MESSAGE( STATUS "Project: ${PROJECT_NAME}" )
MESSAGE( STATUS "Cmake version: ${CMAKE_VERSION}" )
MESSAGE( STATUS "Build type: ${CMAKE_BUILD_TYPE}" )
MESSAGE( STATUS "System: ${CMAKE_SYSTEM}" )
MESSAGE( STATUS "Processor: " ${CMAKE_HOST_SYSTEM_PROCESSOR})
MESSAGE( STATUS "Building for target ${MACHINE}")
MESSAGE( STATUS "Arch: ${ARCH_NAME}")
MESSAGE( STATUS "Using CFLAGS: ${CMAKE_C_FLAGS}")
#MESSAGE( STATUS "Using LDFLAGS: ${LDFLAGS}")
MESSAGE( STATUS "============================================================")

